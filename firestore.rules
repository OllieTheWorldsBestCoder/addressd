rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isCronJob() {
      return request.auth != null && request.auth.uid == 'cron-job';
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Addresses
    match /addresses/{addressId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Embeds
    match /embeds/{embedId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // Blog posts
    match /blog_posts/{postId} {
      allow read: if true;
      allow create, update, delete: if isAdmin() || isCronJob();
      
      // Allow incrementing view count
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views']);
      
      // Allow liking posts
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
    }

    // Blog categories
    match /blog_categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin() || isCronJob();
    }

    // Blog tags
    match /blog_tags/{tagId} {
      allow read: if true;
      allow write: if isAdmin() || isCronJob();
    }
  }
}